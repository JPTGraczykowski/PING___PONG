//---------------------------------------------------------------------------

#include <vcl.h>
#pragma hdrstop

#include "Unit1.h"
//---------------------------------------------------------------------------
#pragma package(smart_init)
#pragma resource "*.dfm"

int x = 10;
int y = 5;
int bounces = 0;
int pointsLeft = 0;
int pointsRight = 0;


void showGameInfo(TLabel *LabelScore, TLabel *LabelBounces, TShape *Background)
{
        AnsiString strBounces = IntToStr(bounces);
        AnsiString strPointsLeft = IntToStr(pointsLeft);
        AnsiString strPointsRight = IntToStr(pointsRight);

        LabelScore->Caption = "Score: " + strPointsLeft + " : " + strPointsRight;
        LabelScore->Left =  Background->Width / 2 - LabelScore->Width / 2;
        LabelScore->Top = Background->Height * 2/6;
        LabelScore->Visible = true;

        LabelBounces->Caption = "Bounces: " + strBounces;
        LabelBounces->Left =  Background->Width / 2 - LabelBounces->Width / 2;
        LabelBounces->Top = Background->Height * 3/6;
        LabelBounces->Visible = true;
}

void prepareWindowToPlay(TShape *Background, TImage *PaddleLeft, TImage *PaddleRight,
                         TImage *Ball, TLabel *LabelScore, TLabel *LabelWhoWins,
                         TLabel *LabelBounces, TLabel *LabelStart, TButton *ButtonStart,
                         TButton *ButtonNewGame, TButton *ButtonNextRound, TTimer *BallTimer,
                         TButton *ButtonHelp)
{
        // positions of elements
        PaddleLeft->Left = 10;
        PaddleLeft->Top = Background->Height / 2 - PaddleLeft->Height / 2;
        PaddleLeft->Visible = true;

        PaddleRight->Left = Background->Width - PaddleRight->Width - 10;
        PaddleRight->Top = Background->Height / 2 - PaddleRight->Height / 2;
        PaddleRight->Visible = true;

        Ball->Left = 488;
        Ball->Top = 190;
        BallTimer->Interval = 32;

        //  turn off game info
        LabelScore->Visible = false;
        LabelBounces->Visible = false;
        LabelWhoWins->Visible = false;

        ButtonNewGame->Visible = false;
        ButtonNextRound->Visible = false;

        //turn on start label, button and help button
        LabelStart->Left = Background->Width / 2 - LabelStart->Width / 2;
        LabelStart->Top = Background->Height / 4;
        LabelStart->Visible = true;

        ButtonStart->Left = Background->Width / 2 - ButtonStart->Width / 2;
        ButtonStart->Top = Background->Height * 2 / 3;
        ButtonStart->Visible = true;
        ButtonStart->Enabled = true;

        ButtonHelp->Left = Background->Width / 2 - ButtonStart->Width / 2;
        ButtonHelp->Top = Background->Height * 4 / 5;
        ButtonHelp->Visible = true;
        ButtonHelp->Enabled = true;
}

TForm1 *Form1;
//---------------------------------------------------------------------------
__fastcall TForm1::TForm1(TComponent* Owner)
        : TForm(Owner)
{
}
//---------------------------------------------------------------------------

void __fastcall TForm1::FormCreate(TObject *Sender)
{
        // start values
        x = 10;
        y = 5;
        bounces = 0;
        pointsLeft = 0;
        pointsRight = 0;

        // background start color
        Background->Brush->Color = clNavy;

        //prepare window to play
        prepareWindowToPlay(Background, PaddleLeft, PaddleRight, Ball, LabelScore,
                                LabelWhoWins, LabelBounces, LabelStart, ButtonStart,
                                ButtonNewGame, ButtonNextRound, BallTimer, ButtonHelp);

}
//---------------------------------------------------------------------------
void __fastcall TForm1::PaddleLeftTimerUpTimer(TObject *Sender)
{
        if(PaddleLeft->Top >= 10)
                PaddleLeft->Top -= 10;        
}
//---------------------------------------------------------------------------
void __fastcall TForm1::PaddleLeftTimerDownTimer(TObject *Sender)
{
        if(PaddleLeft->Top + PaddleLeft->Height <= Background->Height - 10)
                PaddleLeft->Top += 10;        
}
//---------------------------------------------------------------------------
void __fastcall TForm1::PaddleRightTimerUpTimer(TObject *Sender)
{
        if(PaddleRight->Top >= 10)
                PaddleRight->Top -= 10;        
}
//---------------------------------------------------------------------------
void __fastcall TForm1::PaddleRightTimerDownTimer(TObject *Sender)
{
        if(PaddleRight->Top + PaddleRight->Height <= Background->Height - 10)
                PaddleRight->Top += 10;        
}
//---------------------------------------------------------------------------
void __fastcall TForm1::FormKeyDown(TObject *Sender, WORD &Key,
      TShiftState Shift)
{
        // moving up left paddle
        if(Key == 0x41)  // A
        {
                PaddleLeftTimerUp->Enabled = true;
        }

        // moving down left paddle
        if(Key == 0x5A)  // Z
        {
                PaddleLeftTimerDown->Enabled = true;
        }
        // moving up right paddle
        if(Key == VK_UP)  // up
        {
                PaddleRightTimerUp->Enabled = true;
        }

        // moving down right paddle
        if(Key == VK_DOWN)  // down
        {
                PaddleRightTimerDown->Enabled = true;
        }
}
//---------------------------------------------------------------------------
void __fastcall TForm1::FormKeyUp(TObject *Sender, WORD &Key,
      TShiftState Shift)
{
        // moving up left paddle
        if(Key == 0x41)  // A
        {
                PaddleLeftTimerUp->Enabled = false;
        }

        // moving down left paddle
        if(Key == 0x5A)  // Z
        {
                PaddleLeftTimerDown->Enabled = false;
        }
        // moving up right paddle
        if(Key == VK_UP)  // up
        {
                PaddleRightTimerUp->Enabled = false;
        }

        // moving down right paddle
        if(Key == VK_DOWN)  // down
        {
                PaddleRightTimerDown->Enabled = false;
        }
}
//---------------------------------------------------------------------------
void __fastcall TForm1::BallTimerTimer(TObject *Sender)
{
        Ball->Left += x;
        Ball->Top += y;

        //top wall
        if(Ball->Top <= 5) y = -y;

        //bottom wall
        if(Ball->Top + Ball->Height >= Background->Height - 5) y=-y;

        //left paddle contact
        if(Ball->Left < PaddleLeft->Left + PaddleLeft->Width)
        {
                if((Ball->Top + Ball->Height / 2 > PaddleLeft->Top) &&
                   (Ball->Top + Ball->Height / 2 < PaddleLeft->Top + PaddleLeft->Height))
                {
                        // middle paddle
                        if ((x < 0) &&
                        (Ball->Top + Ball->Height / 2 > PaddleLeft->Top + PaddleLeft->Height / 2 - 10) &&
                        (Ball->Top + Ball->Height / 2 < PaddleLeft->Top + PaddleLeft->Height / 2 + 10))
                        {
                                y = -y;
                                x = -x;
                                if(BallTimer->Interval > 6) BallTimer->Interval -= 6;

                        }
                        else if(x < 0) //not middle paddle
                        {
                                x = -x;
                                if(BallTimer->Interval > 2) BallTimer->Interval -= 2;
                        }
                        //change background color
                        Background->Brush->Color = clMaroon;
                        bounces += 1;
                }
                else  // fail
                {
                        pointsRight += 1;

                        BallTimer->Enabled = false;
                        Ball->Visible = false;

                        LabelWhoWins->Left = Background->Width / 2 - LabelWhoWins->Width / 2;
                        LabelWhoWins->Top = Background->Height / 5;
                        LabelWhoWins->Caption = "Point for right player";
                        LabelWhoWins->Visible = true;

                        showGameInfo(LabelScore, LabelBounces, Background);

                        ButtonNewGame->Left = Background->Width / 2 - ButtonNewGame->Width / 2 ;
                        ButtonNewGame->Top = Background->Height * 4 / 6;
                        ButtonNewGame->Visible = true;
                        ButtonNextRound->Left = Background->Width / 2 - ButtonNextRound->Width / 2 ;
                        ButtonNextRound->Top = Background->Height * 5 / 6;
                        ButtonNextRound->Visible = true;

                }
        }
        //right paddle collision
        else if(Ball->Left + Ball->Width > PaddleRight->Left)
        {
                if((Ball->Top + Ball->Height / 2 > PaddleRight->Top) &&
                  (Ball->Top + Ball->Height / 2 < PaddleRight->Top + PaddleRight->Height))
                {
                        // middle paddle
                        if((x > 0) &&
                             (Ball->Top + Ball->Height / 2 > PaddleRight->Top + PaddleRight->Height / 2 - 10) &&
                            (Ball->Top + Ball->Height / 2 < PaddleRight->Top + PaddleRight->Height / 2 + 10))
                            {
                                y = -y;
                                x = -x;
                                if(BallTimer->Interval > 6) BallTimer->Interval -= 6;
                            }
                        else if(x > 0) //not middle paddle
                        {
                                x = -x;
                                if(BallTimer->Interval > 2) BallTimer->Interval -= 2;
                        }
                        Background->Brush->Color = clHotLight;
                        bounces += 1;

                }
                else  // fail
                {
                        pointsLeft += 1;

                        BallTimer->Enabled = false;
                        Ball->Visible = false;

                        LabelWhoWins->Left = Background->Width / 2 - LabelWhoWins->Width / 2 ;
                        LabelWhoWins->Top = Background->Height / 5;
                        LabelWhoWins->Caption = "Point for left player";
                        LabelWhoWins->Visible = true;

                        showGameInfo(LabelScore, LabelBounces, Background);

                        ButtonNewGame->Left = Background->Width / 2 - ButtonNewGame->Width / 2 ;
                        ButtonNewGame->Top = Background->Height * 4 / 6;
                        ButtonNewGame->Visible = true;
                        ButtonNextRound->Left = Background->Width / 2 - ButtonNextRound->Width / 2 ;
                        ButtonNextRound->Top = Background->Height * 5 / 6;
                        ButtonNextRound->Visible = true;
                }
        }        
}
//---------------------------------------------------------------------------
void __fastcall TForm1::ButtonStartClick(TObject *Sender)
{
        LabelStart->Visible = false;
        ButtonStart->Visible = false;
        ButtonStart->Enabled = false;
        ButtonHelp->Visible = false;
        ButtonHelp->Enabled = false;
        BallTimer->Enabled = true;
        Ball->Visible = true;

        // positions of elements
        PaddleLeft->Left = 10;
        PaddleLeft->Top = Background->Height / 2 - PaddleLeft->Height / 2;
        PaddleLeft->Visible = true;

        PaddleRight->Left = Background->Width - PaddleRight->Width - 10;
        PaddleRight->Top = Background->Height / 2 - PaddleRight->Height / 2;
        PaddleRight->Visible = true;
}
//---------------------------------------------------------------------------
void __fastcall TForm1::ButtonNextRoundClick(TObject *Sender)
{
        // start values
        x = 10;
        y = 5;
        bounces = 0;

        //prepare window to play
        prepareWindowToPlay(Background, PaddleLeft, PaddleRight, Ball, LabelScore,
                                LabelWhoWins, LabelBounces, LabelStart, ButtonStart,
                                ButtonNewGame, ButtonNextRound, BallTimer, ButtonHelp);

}
//---------------------------------------------------------------------------


